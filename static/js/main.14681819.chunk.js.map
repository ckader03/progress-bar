{"version":3,"sources":["ProgressBar.js","DisplayProgress.js","Slider.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","props","className","class","style","width","DisplayProgress","percentage","currentValue","this","value","Component","Slider","type","min","max","onChange","e","setValue","target","App","state","bind","newValue","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAEe,SAASA,EAAYC,GAClC,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAWD,EAAME,MAAOC,MAAO,CAAEC,MAAM,GAAD,OAAKJ,EAAMI,MAAX,S,ICF5BC,E,iLAEjB,IAQkBC,EARAC,EAiBlB,OACE,6BACE,6BAnBcA,EAmBCC,KAAKR,MAAMS,QAlBR,IACX,YAED,iBAAN,OAAwBF,IAgBxB,kBAACR,EAAD,CACEK,MAAOI,KAAKR,MAAMS,MAClBP,OAdYI,EAcKE,KAAKR,MAAMS,MAb5BH,EAAa,GACR,MACEA,EAAa,IAAMA,EAAa,GAClC,SACEA,EAAa,GACf,YADF,U,GAfgCI,aCD9B,SAASC,EAAOX,GAC7B,OACE,6BACE,2BACEY,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAOT,EAAMS,MACbM,SAAU,SAAAC,GAAC,OAAIhB,EAAMiB,SAASD,EAAEE,OAAOT,W,UCL1BU,E,YACnB,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CACXX,MAAO,GAET,EAAKQ,SAAW,EAAKA,SAASI,KAAd,gBALC,E,sEAQVC,GACPd,KAAKe,SAAS,CAAEd,MAAOa,M,+BAIvB,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,kDACA,kBAAC,EAAD,CAAiBQ,MAAOD,KAAKY,MAAMX,QACnC,kBAACE,EAAD,CAAQF,MAAOD,KAAKY,MAAMX,MAAOQ,SAAUT,KAAKS,iB,GAnBzBP,aCObc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.14681819.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ProgressBar(props) {\n  return (\n    <div className=\"bar\">\n      <div className={props.class} style={{ width: `${props.width}%` }}></div>\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport ProgressBar from './ProgressBar';\n\nexport default class DisplayProgress extends Component {\n  render() {\n    const getStatus = currentValue => {\n      if (currentValue >= 100) {\n        return 'Complete!';\n      } else {\n        return `In Progress - ${currentValue}`;\n      }\n    };\n\n    const getStyles = percentage => {\n      if (percentage < 33) {\n        return 'low';\n      } else if (percentage > 33 && percentage < 66) {\n        return 'medium';\n      } else if (percentage > 66) {\n        return 'high';\n      }\n    };\n    return (\n      <div>\n        <h3>{getStatus(this.props.value)}</h3>\n        <ProgressBar\n          width={this.props.value}\n          class={getStyles(this.props.value)}\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default function Slider(props) {\n  return (\n    <div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={props.value}\n        onChange={e => props.setValue(e.target.value)}\n      />\n    </div>\n  );\n}","import React, { Component } from 'react';\nimport DisplayProgress from './DisplayProgress';\nimport Slider from './Slider';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n    this.setValue = this.setValue.bind(this);\n  }\n\n  setValue(newValue) {\n    this.setState({ value: newValue });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>React Progress Bar</h1>\n          <DisplayProgress value={this.state.value} />\n          <Slider value={this.state.value} setValue={this.setValue} />\n        </header>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}